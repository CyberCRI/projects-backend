# Generated by Django 3.2.13 on 2022-05-23 16:43

from django.conf import settings
from django.contrib.contenttypes.models import ContentType
from django.db import migrations, models


BASE_ACTIONS = ("create", "retrieve", "list", "destroy", "update", "partial_update")
ADDITIONAL_ACTIONS = ("notification", "image", "duplicate", "member", "group")
SUBSCOPES = (
    "goal", "announcement", "follow", "comment", "review", "review:notified", "linked-project",
    "attachment-link", "attachment-file", "blog-entry", "blog-entry:image", "location"
)
MEMBERS_PERMISSIONS = (
    "retrieve", "list", "duplicate", "goal:retrieve", "goal:list", "announcement:retrieve", "announcement:list",
    "follow:retrieve", "follow:list", "follow:create", "comment:retrieve", "comment:list", "comment:create",
    "review:retrieve", "review:list", "linked-project:retrieve", "linked-project:list", "attachment-link:retrieve",
    "attachment-link:list", "attachment-file:retrieve", "attachment-file:list", "blog-entry:retrieve",
    "blog-entry:list", "location:retrieve", "location:list",
)


def create_instance_permissions(apps, project, ct):
    Permission = apps.get_model("accounts", "Permission")  # noqa
    permissions = []
    scope = 'project'
    pk = project.pk

    for action in BASE_ACTIONS:
        permissions.append(Permission(scope=scope, action=action, model=ct, object_pk=pk))

    for action in ADDITIONAL_ACTIONS:
        permissions.append(Permission(scope=scope, action=action, model=ct, object_pk=pk))

    for representation in SUBSCOPES:
        if ":" in representation:
            subscope, action = representation.split(":", maxsplit=1)
            permissions.append(Permission(scope=scope, subscope=subscope, action=action, model=ct, object_pk=pk,))
        else:
            for action in BASE_ACTIONS:
                permission = Permission(scope=scope, subscope=representation, action=action, model=ct, object_pk=pk,)
                permissions.append(permission)

    Permission.objects.bulk_create(permissions, ignore_conflicts=True)


def get_permissions_objects(apps, permissions, project, ct):
    Permission = apps.get_model("accounts", "Permission")  # noqa
    permission_objects = list()
    for p in permissions:
        if ":" in p:
            subscope, action = p.split(":", maxsplit=1)
            permission_objects.append(Permission.objects.get(
                scope="project", subscope=subscope, action=action, object_pk=project.pk, model=ct
            ))
        else:
            if p in BASE_ACTIONS + ADDITIONAL_ACTIONS:
                permission_objects.append(Permission.objects.get(
                    scope="project", subscope="", action=p, object_pk=project.pk, model=ct
                ))
            else:
                for action in BASE_ACTIONS:
                    permission_objects.append(Permission.objects.get(
                        scope="project", subscope=p, action=action, object_pk=project.pk, model=ct
                    ))

    return set(permission_objects)


def get_default_owners_permissions(apps, project, ct):
    Permission = apps.get_model("accounts", "Permission")  # noqa
    return Permission.objects.filter(object_pk=str(project.pk), model=ct).exclude(
        subscope="review", action__in=["create", "destroy", "partial_update", "update"]
    )


def get_default_reviewers_permissions(apps, project, ct):  # noqa
    Permission = apps.get_model("accounts", "Permission")  # noqa
    return Permission.objects.filter(object_pk=str(project.pk), model=ct)


def get_default_members_permissions(apps, project, ct):
    permissions = MEMBERS_PERMISSIONS
    return get_permissions_objects(apps, permissions, project, ct)


def give_project_rights(apps, schema_editor):
    ContentTypeAlias = apps.get_model("contenttypes", "ContentType")  # noqa
    ProjectMember = apps.get_model("projects", "ProjectMember")  # noqa
    Project = apps.get_model("projects", "Project")  # noqa
    Group = apps.get_model("accounts", "Group")  # noqa

    projects = Project.objects.all()
    for count, project in enumerate(projects):
        print(f"{count + 1}/{len(projects)}")
        ct = ContentType.objects.get_for_model(Project)
        ct_alias = ContentTypeAlias.objects.get(pk=ct.pk)
        pk = project.pk

        create_instance_permissions(apps, project, ct_alias)

        owners, _ = Group.objects.get_or_create(
            name="owners", model=ct_alias, object_pk=pk
        )
        owners.permissions.add(*get_default_owners_permissions(apps, project, ct_alias))

        reviewers, _ = Group.objects.get_or_create(
            name="reviewers", model=ct_alias, object_pk=pk
        )
        reviewers.permissions.add(*get_default_reviewers_permissions(apps, project, ct_alias))

        members, _ = Group.objects.get_or_create(
            name="members", model=ct_alias, object_pk=pk
        )
        members.permissions.add(*get_default_members_permissions(apps, project, ct_alias))

        project.groups.add(owners, reviewers, members)
        owners.users.add(
            *[
                member.user.id
                for member in ProjectMember.objects.filter(project__id=project.id, role='owner')
            ]
        )
        reviewers.users.add(
            *[
                member.user.id for member
                in ProjectMember.objects.filter(project__id=project.id, role='reviewer')
            ]
        )
        members.users.add(
            *[
                member.user.id for member
                in ProjectMember.objects.filter(project__id=project.id, role='member')
            ]
        )


def give_project_member_role(apps, schema_editor):
    ProjectMember = apps.get_model("projects", "ProjectMember")  # noqa
    Project = apps.get_model("projects", "Project")  # noqa

    projects = Project.objects.all()
    for project in projects:
        owners = project.groups.get(name="owners").users.all()
        for owner in owners:
            user = ProjectMember.objects.get(project__id=project.id, user__keycloak_id=owner.keycloak_id)
            user.role = 'owner'
            user.save()

        reviewers = project.groups.get(name="reviewers").users.all()
        for reviewer in reviewers:
            user = ProjectMember.objects.get(project__id=project.id, user__keycloak_id=reviewer.keycloak_id)
            user.role = 'reviewer'
            user.save()

        members = project.groups.get(name="members").users.all()
        for member in members:
            user = ProjectMember.objects.get(project__id=project.id, user__keycloak_id=member.keycloak_id)
            user.role = 'member'
            user.save()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0004_auto_20220410_0513'),
        ('projects', '0013_alter_historicalproject_main_category_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='projectmember',
            name='role',
            field=models.CharField(choices=[('owner', 'Owner'), ('member', 'Member'), ('reviewer', 'Reviewer')],
                                   max_length=10, default='member'),
            preserve_default=False
        ),
        migrations.AddField(
            model_name='project',
            name='groups',
            field=models.ManyToManyField(related_name='projects', to='accounts.Group'),
        ),
        migrations.RunPython(give_project_rights, give_project_member_role),
        migrations.RemoveField(
            model_name='projectmember',
            name='role',
        ),
        migrations.RemoveField(
            model_name='historicalprojectmember',
            name='role',
        ),
    ]
