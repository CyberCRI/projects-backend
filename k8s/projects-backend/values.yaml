servedUrls:
  - '{{ printf ".%s" .Values.hostname }}' # .example.com will match both example.com and www.example.com
  - '{{ tpl $.Values.fullName $ }}' # The full name of the k8s service, called from inside the namespace
  - '{{ tpl $.Values.fullName $ }}.{{ $.Values.projectsNamespace }}' # The full name of the k8s service, called from outside the namespace
  - '{{ tpl $.Values.fullName $ }}.{{ $.Values.projectsNamespace }}.svc.cluster.local' # Alternative to the full name of the k8s service, called from outside the namespace
  - '127.0.0.1' # The localhost, test if this is required
  - '.localhost' # The localhost, test if this is required
  - '0.0.0.0' # The localhost, test if this is required

additionnalServedUrls: [] # Use this if you want to add custom urls to the list above from the argocd application

corsAllowedDomains: []

config:
  nonSensitive:
    ALLOWED_HOSTS: '{{ tpl (join "," .Values.servedUrls) $ }}'
    CORS_ALLOWED_DOMAINS: '{{ join "," .Values.corsAllowedDomains}}'
    # Kubernetes pods, required for the probes
    POSTGRES_DB: projects
    BEHIND_HTTPS_PROXY: "True"
    ANALYTICS_URL: http://projects-analytics
    WIKIPEDIA_GATEWAY_URL: http://wikipedia-gateway.wikipedia-gateway
    MJML_HTTPSERVER_URL: http://mjml-server.mjml/v1/render
    CELERY_BROKER_URL: redis://projects-api-redis-master:6379/0
    CELERY_RESULT_BACKEND: redis://projects-api-redis-master:6379/0
    CACHE_REDIS_URL: redis://projects-api-redis-master:6379/1
    ALGOLIA_AUTO_INDEXING: "1"
    EMAIL_HOST: projects-mailhog
    EMAIL_PORT: "1025"
    # Debug
    DJANGO_CHECK_FAIL_LEVEL: ERROR
    INSTANCE: "{{ .Values.instance }}"
    PUBLIC_URL: "https://{{ .Values.hostname }}"
    PORT: "{{ .Values.backend.port | toString }}"
    GUNICORN_WORKERS_COUNT: "4"
    GUNICORN_MAX_REQUESTS: "1000"
    GUNICORN_MAX_REQUESTS_JITTER: "50"
    GUNICORN_LOG_LEVEL: "info"

fullName: projects-backend

projectsNamespace: projects
monitoringNamespace: monitoring

image:
  repository: criprodprod.azurecr.io
  path: projects-backend
  tag: "{{ .Values.application.revision }}"


ingressPath: /

backend:
  replicaCount: 1
  commonLabels:
    app.kubernetes.io/name: projects-backend
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: projects
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/instance: "{{ .Values.instance }}"
  resources:
    requests:
      cpu: 10m
      memory: 1103M
    limits:
      memory: 1347M
  port: 8000

celery:
  replicaCount: 1
  commonLabels:
    app.kubernetes.io/name: projects-celery
    app.kubernetes.io/component: celery
    app.kubernetes.io/part-of: projects
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/instance: "{{ .Values.instance }}"
  resources:
    requests:
      cpu: 20m
      memory: 700Mi
    limits:
      memory: 1Gi

redisAllowedLabel: projects-api-redis-client # Required for network policy

redis:
  enabled: false # todo: enable by default
  autoSync: false
  valueFiles: []
  argocdAppName: projects-api-redis
  helmReleaseName: projects-api-redis
  targetRevision: main
  cascadeDelete: true

instance: main # By default, the instance of the backend is the main one

workflow:
  rbac:
    executorClusterRoleName: executor
    serviceAccountName: workflow
  enabled: false
  lifecycle:
    enabled: false
    resourceName: '{{ printf "%s-lifecycle" .Values.fullname }}'
  backups:
    enabled: false
    resourceName: '{{ printf "%s-backups" .Values.fullname }}'
    storageContainerName: projects-backups
