apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- (tpl ($.Values.backend.commonLabels | toYaml ) $) | nindent 4 }}
  name: {{ tpl $.Values.fullName $ }}
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  {{- if not .Values.backend.horizontalScaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- (tpl ($.Values.backend.commonLabels | toYaml ) $) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- (tpl ($.Values.backend.commonLabels | toYaml ) $) | nindent 8 }}
        {{ printf "%s-client" $.Values.redis.helmReleaseName }}: "true"
        {{- if .Values.sablier.enabled }}
        sablier.enable: "true"
        sablier.group: {{ .Values.sablier.groupName }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ index $.Values.backend.commonLabels "app.kubernetes.io/name" }}
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        {{- include "common.security.podSecurityContext.restricted" dict | nindent 8 }}
      initContainers:
      {{- with $.Values.image }}
      - image: {{ tpl (printf "%s/%s:%s" .repository .path .tag) $ }}
      {{- end }}
        imagePullPolicy: IfNotPresent
        name: projects-backend-prestart
        args:
          - make
        {{- if .Values.runMigrations }}
          - prestart
        {{- else }}
          - prestart-no-migrate
        {{- end }}
        envFrom:
          - configMapRef:
              name: {{ tpl $.Values.fullName $ }}
        {{- if .Values.config.sensitive }}
        volumeMounts:
        - name: secrets
          mountPath: "/secrets"
          readOnly: true
        {{- end }}
        securityContext:
          {{- include "common.security.containerSecurityContext.restricted" dict | nindent 10 }}
      containers:
      {{- with $.Values.image }}
      - image: {{ tpl (printf "%s/%s:%s" .repository .path .tag) $ }}
      {{- end }}
        imagePullPolicy: IfNotPresent
        name: projects-backend
        {{- with .Values.uvicorn }}
        args:
        - uvicorn
        - {{ .entrypoint }}
        - '--workers'
        - {{ .workers | quote}}
        - '--host'
        - {{ .host | quote}}
        {{- if .limitRequests }}
        - '--limit-max-requests'
        -  {{.maxRequests | quote}}
        {{- end }}
        {{- end }}
        ports:
          - name: http
            containerPort: {{ .Values.backend.port }}
        livenessProbe:
          httpGet:
            port: http
            path: /v1/healthz/live
          timeoutSeconds: 20
        readinessProbe:
          httpGet:
            port: http
            path: /v1/healthz/ready
          timeoutSeconds: 20
        envFrom:
        - configMapRef:
            name: {{ tpl $.Values.fullName $ }}
        resources:
          {{- .Values.backend.resources | toYaml | nindent 10 }}
        {{- if .Values.config.sensitive }}
        volumeMounts:
        - name: secrets
          mountPath: "/secrets"
          readOnly: true
        {{- end }}
        securityContext:
          {{- include "common.security.containerSecurityContext.restricted" dict | nindent 10 }}
      {{- if .Values.config.sensitive }}
      volumes:
      - name: secrets
        secret:
          secretName: {{ tpl $.Values.fullName $ }}
      {{- end }}
