name: Lint & test
on:
  workflow_call:
    secrets:
      submodules-app-private-key:
        required: false
        description: 'The private-key of the app used for authentication. Only needed if `recursive-submodule-checkout` is true'
      submodules-app-id:
        required: false
        description: 'The id of the app used for authentication. Only needed if `recursive-submodule-checkout` is true.'
      submodules-app-installation-id:
        required: false
        description: 'The installation id of the app used for authentication. Only needed if `recursive-submodule-checkout` is true.'
      registry-username:
        required: true
        description: 'The username on the registry'
      registry-password:
        required: true
        description: 'The password on the registry'
    inputs:
      registry-name:
        type: string
        required: true
        description: 'The name of the registry to push the image to'
      keycloak-image-name:
        type: string
        required: true
        description: 'The name of the keycloak image'
      keycloak-image-tag:
        type: string
        required: true
        description: 'The tag of the keycloak image'
      backend-image-name:
        type: string
        required: true
        description: 'The name of the backend image'
      backend-image-tag:
        type: string
        required: true
        description: 'The tag of the backend image'

jobs:
  tests:
    runs-on: backend-lint-test-runner
    defaults:
      run:
        working-directory: /app
    container:
      image: ${{ inputs.registry-name }}/${{ inputs.backend-image-name }}:${{ inputs.backend-image-tag }}
      credentials:
        username: ${{ secrets.registry-username }}
        password: ${{ secrets.registry-password }}
      env:
        DJANGO_SETTINGS_MODULE: projects.settings.local
      options: --user root
    services:
      postgres:
        image: pgvector/pgvector:pg14
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mjml:
        image: danihodovic/mjml-server
        ports:
          - 15500:15500
      keycloak:
        image: ${{ inputs.registry-name }}/${{inputs.keycloak-image-name}}:${{ inputs.keycloak-image-tag }}
        credentials:
          username: ${{ secrets.registry-username }}
          password: ${{ secrets.registry-password }}
        ports:
          - 8001:8080
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
      redis:
        image: redis:6.2-bullseye
        ports:
          - 6379:6379
      mailhog:
        image: mailhog/mailhog
        ports:
          - 1025:1025
          - 8025:8025
    steps:
    - name: Wait for Keycloak
      run: |
        for i in {1..30}; do
          if curl -s http://keycloak:8080/realms/lp; then
            echo "Keycloak is up!"
            exit 0
          fi
          echo "Waiting for Keycloak..."
          sleep 5
        done
        echo "Keycloak did not start in time."
        exit 1
    # - name: Check the code formatting
    #   run: make format-check
    # - name: Run the linter
    #   run: make lint
    - name: Check that migrations are up-to-date
      run: make migrations-check
    # - name: Check that translations are up-to-date
    #   run: make locales-check
    # - name: Run unit tests
    #   run: make test
